variables:
  backendImageName: quay.io/anonlink-test #data61/anonlink-app
  frontendImageName: data61/anonlink-nginx
  docsImageName: quay.io/anonlink-test #data61/anonlink-entity-service-docs
  tutorialImageName: quay.io/anonlink-test #data61/anonlink-entity-service-tutorial
  benchmarkingImageName: quay.io/anonlink-test #data61/anonlink-benchmarking

trigger:
- feature-azure-pipeline


stages:
#- stage: stage_docker_image_build
#  displayName: Build docker images
#  dependsOn: []
#  jobs:
#  - template: .azurePipeline/templateDockerBuildPush.yml
#    parameters:
#      folder: './frontend'
#      imageName: data61/anonlink-nginx
#      jobName: 'anonlink_nginx'
#  - template: .azurePipeline/templateDockerBuildPush.yml
#    parameters:
#      folder: './backend'
#      imageName: data61/anonlink-app
#      jobName: 'anonlink_app'
      
#- stage: stage_benchmark_image_build
#  displayName: Build benchmark images
#  dependsOn: []
#  jobs:
#  - template: .azurePipeline/templateDockerBuildPush.yml
#    parameters:
#      folder: './benchmarking'
#      imageName: data61/anonlink-benchmark
#      jobName: 'anonlink_benchmark'

- stage: stage_integration_tests
  displayName: Integration tests
#  dependsOn: [stage_docker_image_build]
  dependsOn: []
  jobs:
  - job: integration_test
    timeoutInMinutes: 10
    variables:
     commandPrefix: docker-compose -f tools/docker-compose.yml -f tools/ci.yml --project-directory . 
    displayName: Integration tests
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
    - script: |
        sourceBranch="$(Build.SourceBranch)"; echo ${sourceBranch##*/} | tr [:upper:] [:lower:] | tr -cd [a-z] | xargs -I@ echo "##vso[task.setvariable variable=dockertag]@"
    - script: |
        $(commandPrefix) -p es$(dockertag)$(Build.BuildNumber) up db_init > /dev/null 2>&1
      env:
        TAG: $(dockertag)
    - script: |
        $(commandPrefix) -p es$(dockertag)$(Build.BuildNumber) up --abort-on-container-exit db minio redis backend worker nginx tests
      env:
        TAG: $(dockertag)
    - script: |
        $(commandPrefix) ps -q tests | xargs -I@ docker cp @:/var/www/testResults.xml $(Build.ArtifactStagingDirectory)/testResults.xml
        $(commandPrefix) -p es$(dockertag)$(Build.BuildNumber) down -v
      env:
        TAG: $(dockertag)
      condition: succeededOrFailed()
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(Build.ArtifactStagingDirectory)/testResults.xml'
        testRunTitle: 'Publish integration test results'
        failTaskOnFailedTests: true

- stage: benchmark
  displayName: benchmark
#  dependsOn: 
#  - stage_docker_image_build
#  - stage_benchmark_image_build
  dependsOn: []
  jobs:
  - job: benchmark
    timeoutInMinutes: 15
    variables:
      commandPrefix: docker-compose -f tools/docker-compose.yml -f tools/ci.yml --project-directory .
    steps:
    - script: |
        sourceBranch="$(Build.SourceBranch)"; echo ${sourceBranch##*/} | tr [:upper:] [:lower:] | tr -cd [a-z] | xargs -I@ echo "##vso[task.setvariable variable=dockertag]@"
    - script: |
        $(commandPrefix) -p es$(dockertag)$(Build.BuildNumber) up db_init > /dev/null 2>&1
      env:
        TAG: $(dockertag)
    - script: |
        echo "Starting benchmarks"
        $(commandPrefix) -p es$(dockertag)$(Build.BuildNumber) up --abort-on-container-exit --exit-code-from benchmark db minio redis backend worker nginx benchmark
      env:
        TAG: $(dockertag)
    - script: |
        $(commandPrefix) ps -q benchmark | xargs -I@ docker cp @:/app/results.json $(Build.ArtifactStagingDirectory)/results.json
        $(commandPrefix) -p es$(dockertag)$(Build.BuildNumber) down -v
      env:
        TAG: $(dockertag)
    # Publish Pipeline Artifact
    # Publish a local directory or file as a named artifact for the current pipeline.
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'benchmark'
        targetPath: $(Build.ArtifactStagingDirectory)/results.json
